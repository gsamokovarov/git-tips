doctype 5
html(lang="en")
  head
    meta(charset="utf-8")

    title Git Tricks

    meta(name="description", content="Git Tricks")
    meta(name="author", content="Генади Самоковаров")

    link(rel="stylesheet", href="vendor/reveal.js/css/reveal.css")
    link(rel="stylesheet", href="vendor/reveal.js/css/theme/simple.css")
    link(rel="stylesheet", href="vendor/github.css")

    style.
      .reveal,
      .reveal h1,
      .reveal h2,
      .reveal h3,
      .reveal h4,
      .reveal h5,
      .reveal h6 { font-family: Palatino, Georgia, serif; }

      .reveal h1 { font-size: 2.2em; text-shadow: none; }
      .reveal h2 { font-size: 1.9em; }
      .reveal h3 { font-size: 1.8em; }
      .reveal h4 { font-size: 1.5em; }
      .reveal h5 { font-size: 1.2em; }

      .reveal .white { color: #FFFFFF; }
      .reveal .big { font-size: 1.9em; }

      .reveal pre.inline { box-shadow: none; }
      .reveal img.inline { background: transparent; border: 0; box-shadow: none; margin: 0; vertical-align: middle; }

      .reveal a.image { text-decoration: none; }
      .reveal a:hover img.inline { background: transparent; border: 0; box-shadow: none; }

      .reveal .hidden { visibility: hidden; }

      .reveal .red {
        -moz-animation: red 2s infinite linear;
        -o-animation: red 2s infinite linear;
        -webkit-animation: red 2s infinite linear;
        animation: red 2s infinite linear;
      }

      .reveal .green {
        -moz-animation: green 2s infinite linear;
        -o-animation: green 2s infinite linear;
        -webkit-animation: green 2s infinite linear;
        animation: green 2s infinite linear;
      }

      @-moz-keyframes green {
        0% { color: inherit!; } 50% { color: green; } 100% { color: inherit!; }
      }
      @-webkit-keyframes green {
        0% { color: inherit!; } 50% { color: green; } 100% { color: inherit!; }
      }
      @-o-keyframes green {
        0% { color: inherit!; } 50% { color: green; } 100% { color: inherit!; }
      }
      @-ms-keyframes green {
        0% { color: inherit!; } 50% { color: green; } 100% { color: inherit!; }
      }
      @keyframes green {
        0% { color: inherit!; } 50% { color: green; } 100% { color: inherit!; }
      }

      @-moz-keyframes red {
        0% { color: inherit!; } 50% { color: red; } 100% { color: inherit!; }
      }
      @-webkit-keyframes red {
        0% { color: inherit!; } 50% { color: red; } 100% { color: inherit!; }
      }
      @-o-keyframes red {
        0% { color: inherit!; } 50% { color: red; } 100% { color: inherit!; }
      }
      @-ms-keyframes red {
        0% { color: inherit!; } 50% { color: red; } 100% { color: inherit!; }
      }
      @keyframes red {
        0% { color: inherit!; } 50% { color: red; } 100% { color: inherit!; }
      }

  body
    div.reveal
      div.slides
        section(data-background="#000000")
          h1.white Git <span class="red">Tips</span>

        section
          img(class="inline" src="img/noidea.jpg")

        section
          img(class="inline" src="img/notrust.jpg")

        section
          section(data-background="#000000")
            h2.white git-rebase

          section
            blockquote.
              Eventually you’ll discover the Easter egg in Git: all meaningful
              operations can be expressed in terms of the rebase command. Once
              you figure that out it all makes sense.
            p: a(href="http://typicalprogrammer.com/linus-torvalds-goes-off-on-linux-and-git/").
              Linus Torvalds

          section
            h2 What does rebase do?

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /
              | D---E master

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /
              | D---E---F---G master

          section(data-background="#000000")
            pre.white
              | $ git rebase --onto master topic

          section(data-background="#000000" data-transition="none")
            pre.white
              |               A'--B'--C' topic
              |              /
              | D---E---F---G master

          section(data-background="#000000" data-transition="none")
            pre.white
              | D---E---F---G--A'--B'--C' topic
              | 
              | 

          section
            h2 It can get more complex...

          section(data-background="#000000" data-transition="none")
            pre.white
              | o---o---o---o---o  master
              |      \
              |       o---o---o---o---o  next
              | 
              | 

          section(data-background="#000000" data-transition="none")
            pre.white
              | o---o---o---o---o  master
              |      \
              |       o---o---o---o---o  next
              |                        \
              |                         o---o---o  topic

          section(data-background="#000000")
            pre.white
              | $ git rebase --onto master next topic

          section(data-background="#000000" data-transition="none")
            pre.white
              |  o---o---o---o---o  master
              |      |            \
              |      |             o'--o'--o'  topic
              |       \
              |        o---o---o---o---o  next

          section
            h2 When to rebase?

          section
            h2 Rebase only <span class="red">topic</span> branches!

          section
            blockquote.
              Rebasing (or any other form of rewriting) a branch that others
              have based work on is a bad idea: anyone downstream of it is
              forced to manually fix their history.
            p: a(href="http://git-scm.com/docs/git-rebase").
              git-rebase --help

          section(data-background="#000000")
            h2.white git-rebase--interactive

          section
            h2 As an idea, squish your commits into one.

          section
            h2 This will tidy up the history.

        section
          section(data-background="#000000")
            h2.white git-merge

          section
            h2 What does merge do?

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /
              | D---E master

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /
              | D---E---F---G master

          section(data-background="#000000")
            pre.white
              | $ git merge topic

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /         \
              | D---E---F---G---H master

          section
            h2 See the difference to rebase?

          section
            h2 <span class="red">A</span>, <span class="red">B</span> and <span class="red">C</span> are the same!

          section
            h2 <span class="red">H</span> has both <span class="red">G</span> and <span class="red">C</span> as parents.

          section
            h2 This behaviour is not guaranteed.

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /
              | D---E master

          section(data-background="#000000")
            pre.white
              | $ git merge topic

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /          master
              | D---E

          section
            h2 <span class="red">C</span> is the same for both branches!

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /
              | D---E master

          section(data-background="#000000")
            pre.white
              | $ git merge topic --no-ff

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /         \
              | D---E-----------F master

        section
          section(data-background="#000000")
            h2.white git-branch

          section
            h2 Branches are <span class="red">pointers</span>.

          section
            h2 Thats why they're fast.

          section
            h2 Thats why fast-forwarding is possible.

          section(data-background="#000000")
            h2.white Each commit has one or many <span class="red">parents</span>.

          section
            h2 Thats why you can checkout commits.

        section
          section(data-background="#000000")
            h2.white git-pull

          section
            h2 Like managing your local branches was easy...

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /
              | D---E master (me)

          section(data-background="#000000" data-transition="none")
            pre.white
              | 
              | 
              | D---E---F---H master (you)

          section(data-background="#000000")
            pre.white
              | $ git pull you master

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /
              | D---E---F---H master (me)

          section
            h2 Consider this.

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /         \
              | D---E-----------P master (me)
              | 
              | 

          section(data-background="#000000" data-transition="none")
            pre.white
              | 
              | 
              | D---E---F---H master (you)
              | 
              | 

          section(data-background="#000000")
            pre.white
              | $ git pull you master

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /         \
              | D---E-----------P---M master (me)
              |       \            /
              |        F---H-------

          section
            h2 Oh, git-pull <span class="red">merges</span> branches.

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /         \
              | D---E-----------P master (me)

          section(data-background="#000000" data-transition="none")
            pre.white
              | 
              | 
              | D---E---F---H master (you)

          section(data-background="#000000")
            pre.white
              | $ git pull you master --rebase

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /         \
              | D---E-----------P---F'--H' master (me)

          section
            h2 That's why you don't create PR's from master to master.

          section
            h2 It <span class="red">fucks up</span> the history!

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /         \
              | D---E-----------P master (me)

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /         \
              | D---E-----------P---H master (you)

          section(data-background="#000000")
            pre.white
              | $ git pull you master --no-ff

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /         \
              | D---E-----------P---H---M master (me)

          section(data-background="img/ohcrap1.jpg")
          section(data-background="img/ohcrap2.jpg")
          section(data-background="img/ohcrap3.png")

          section
            h2.fragment Just give me a moment...

        section
          section(data-background="#000000")
            h2.white git-reset

          section
            img(class="inline" src="img/gangnam.png")

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /         \
              | D---E-----------P---H---M master (me)
              | 
              | 

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /         \
              | D---E-----------P---S---H---M' master (you)
              |       \            /
              |        F---G-------

          section
            h2 I really don't wanna deal with this crap...

          section(data-background="#000000")
            pre.white
              | $ git fetch you
              | $ git reset --hard you/master

          section(data-background="#000000" data-transition="none")
            pre.white
              |       A---B---C topic
              |      /         \
              | D---E-----------P---S---H---M' master (me)
              |       \            /
              |        F---G-------

          section
            h2 But, seriously, be careful!

        section
          section(data-background="#000000")
            h2.white <span class="green">git-tips</span>

          section(data-background="#000000")
            pre.white
              | $ git commit -v

          section(data-background="#000000")
            pre.white
              | $ git commit --amend

          section(data-background="#000000")
            pre.white
              | $ cat ~/.gitconfig
              | [help]
              | autocorrect = 1

          section(data-background="#000000")
            pre.white
              | $ cat ~/.gitconfig
              | [alias]
              |   branches = branch -a
              |   tags = tag -l
              |   remotes = remote
              |   sprout = checkout -b
              |   switch = checkout
              |   unstash = stash pop
              |   forget = checkout -f
              |   remember = checkout -f
              |   root = rev-parse --show-toplevel
              |   back = checkout -
              |   amend = commit --amend
              |   track = follow
              |   state = status -s
              |   rewind = reset --hard HEAD~1

          section(data-background="#000000")
            pre.white
              | $ cat ~/bin/git-follow
              | #!/usr/bin/env bash
              | #
              | # Follows the current git branch on a remote. If the remote is not
              | # specified, it is assumed to be called origin.
              | #
              | # Usage:
              | #   git follow [remote]
              | 
              | REMOTE=${1:-origin}
              | BRANCH=$(git symbolic-ref --short HEAD)
              | 
              | git branch --set-upstream-to=$REMOTE/$BRANCH $BRANCH

          section(data-background="#000000")
            pre.white
              | $ hub --version
              | git version 1.8.2.3
              | hub version 1.11.1

        section
          a(href="http://git-scm.com/"): img(class="inline" src="img/logo@2x.png")

    script(src="vendor/reveal.js/lib/js/head.min.js")
    script(src="vendor/reveal.js/js/reveal.js")

    script.
      Reveal.initialize({
        controls: false,
        progress: false,
        history: true,
        center: true,
        rollingLinks: true,
        transition: 'linear',
        backgroundTransition: 'none',
        dependencies: [
          {
            src: 'vendor/reveal.js/plugin/highlight/highlight.js',
            async: true,
            callback: function() {
              hljs.initHighlightingOnLoad();
            }
          }
        ]
      });
